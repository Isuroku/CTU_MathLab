% load('dns_data.mat')
clear all;

[labels_trn, kernel_matrix_trn] = libsvmread('trn_kernel_mat.svmlight');
[labels_val, kernel_matrix_val] = libsvmread('val_kernel_mat.svmlight');
[labels_tst, kernel_matrix_tst] = libsvmread('tst_kernel_mat.svmlight');

[sample_count, f_vec] = size( kernel_matrix_trn );

C   = [0.01, 0.1, 1, 10, 100];
c_count = length(C);

trn_err_tables = zeros(sample_count, c_count);
mean_trn_err_tables = zeros(1, c_count);

[val_count, f_vec2] = size( kernel_matrix_val );
val_err_tables = zeros(val_count, c_count);
mean_val_err_tables = zeros(1, c_count);

for c_index = 1:c_count
    c = C(c_index);
    
    Svm = svmtrain(labels_trn, [[1:sample_count]' kernel_matrix_trn], ['-s 0 -t 4 -c ' num2str(c)] );

    % get parameters of kernel classifier
    bias             = -Svm.rho;
    alpha            = zeros(sample_count, 1);
    alpha(Svm.SVs)   = Svm.sv_coef(:);

    % predict training examples
    score_trn = kernel_matrix_trn * alpha + bias;
    pred_trn = 2*double( score_trn >= 0) - 1;
    
    % compute training error
    mean_trn_err_tables(c_index) = mean( pred_trn(:) ~= labels_trn(:) );
    trn_err_tables(:,c_index) = pred_trn(:) ~= labels_trn(:);
    
    score_val = kernel_matrix_val * alpha + bias;
    pred_val = 2*double( score_val >= 0) - 1;
    
    mean_trn_err_tables(c_index) = mean( pred_trn(:) ~= labels_trn(:) );
    val_err_tables(:,c_index) = pred_trn(:) ~= labels_trn(:);
end


